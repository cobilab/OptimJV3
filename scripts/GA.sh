#!/bin/bash
#
### FUNCTIONS ###############################################################################################
#
function SHOW_HELP() {
  echo " -------------------------------------------------------";
  echo "                                                        ";
  echo " OptimJV3 - optimize JARVIS3 CM and RM parameters       ";
  echo "                                                        ";
  echo " Program options ---------------------------------------";
  echo "                                                        ";
  echo "-h|--help......................................Show this";
  echo "-v|--view-ds|--view-datasets...View sequence names, size";
  echo "           of each in bytes, MB, and GB, and their group";
  echo "-fg|--first-generation...Specify first generation number";
  echo "-lg|--last-generation......Select last generation number";
  echo "                                           by their size";
  echo "-a|-ga|--genetic-algorithm...Define (folder) name of the";
  echo "                                       genetic algorithm";
  echo "-s|--seq|--sequence.................Select sequence name";
  echo "-sg|--seq-grp|--sequence-group.....Select sequence group";
  echo "-ds|--dataset......Select sequence by its dataset number";
  echo "-dr|--drange|--dsrange|--dataset-range............Select";
  echo "                   sequences by range of dataset numbers";
  echo "-ps|--psize|--population|--population-size........Define";
  echo "                                         population size";
  echo "-t|--nthreads...........num of threads to run JARVIS3 in"; 
  echo "                                                parallel";
  echo "-sd|--seed.....................Define pseudo-random seed";
  echo "-si|--seed-increment...............Define seed increment";
  echo "                                                        ";
  echo " Program options (initialization) ----------------------";
  echo "                                                        ";
  echo "-hei|--heuristic-initialization.......Activate heuristic";
  echo "                     initialization/local initialization";
  echo "-hyi|--hybrid-initialization.............Activate hybrid";
  echo "                                          initialization";
  echo "-hhp|--hybrid-heuristic-percentage.....Define percentage";
  echo "            of tests generated by heuristic/local search";
  echo "-hhp|--hybrid-heuristic-percentage.........Define number";
  echo "            of tests generated by heuristic/local search";
  echo "-mCM|--m-cm|--min-cm....Define minimum number of context";
  echo "                                            models (CMs)";
  echo "-MCM|--M-cm|--max-cm............Define maximum number of";
  echo "                                    context models (CMs)";
  echo "-mRM|--m-rm|--min-rm............Define minimum number of";
  echo "                                copy/repeat models (RMs)";
  echo "-MRM|--M-rm|--max-rm............Define maximum number of";
  echo "                                copy/repeat models (RMs)";
  echo "-lr|--learning-rate.................Define learning rate";
  echo "-hs|--hidden-size.....................Define hidden size";
  echo "-sing|--seeding.................Activate seeding feature";
  echo "to populate with few hardcoded solutions. Only works for";
  echo "                                            human genome";
  echo "                                                        ";
  echo " Program options (run) ---------------------------------";
  echo "                                                        ";
  echo "-t|--nthreads....Define number of threads to run JARVIS3"; 
  echo "                                             in parallel";
  echo "                                                        ";
  echo " Program options (evaluation) --------------------------";
  echo "                                                        ";
  echo "--moga|--moga-wm|--moga-weightned-metric..Activate Multi";
  echo "      Objective Genetic Algorithm (MOGA) using weightned";
  echo "                                         metric function";
  echo "--moga-ws|--moga-weightned-sum..Activate Multi-Objective";
  echo "   Genetic Algorithm (MOGA) using weightned sum function";
  echo "-pe|--p-exp|--p-expoent..........Define expoent for MOGA";
  echo "                               weightned metric function";
  echo "-w1|-wBPS|--w-bps|--weight-bps.....Bits Per Symbol (BPS)";
  echo "                                weight for MOGA function";
  echo "-w2|-wCTIME|--w-ctime|--weight-ctime....Compression time";
  echo "                                weight for MOGA function";
  echo "                                                        ";
  echo " Program options (selection) ---------------------------";
  echo "                                                        ";
  echo "-sl|--sel|--selection...................Choose selection";
  echo "   operator: 'elitist' (default), 'roulette', 'rank', or";
  echo "                                            'tournament'";
  echo "-ns|--num-sel-cmds...Define number of commands to select";
  echo "-sr|--selection-rate...Define rate of commands to select";
  echo "                                                        ";
  echo " Program options (crossover) ---------------------------";
  echo "                                                        ";
  echo "-cr|-ccr|--comand-crossover-rate...Define crossover rate";
  echo "                          of a selected pair of commands";
  echo "-mrc|--model-crossover-rate........Define crossover rate";
  echo "                        of a selected pair of CMs or RMs";
  echo "-cc|--command-crossover.........Choose command crossover";
  echo " operator: 'mrc' (metameric random crossover) (default),";
  echo "                   (metameric canonical crossover) 'mcc'";
  echo "-c|--crossover..........Choose model crossover operator:";
  echo "   'xpoint' (default), 'uniform', 'average', 'discrete',";
  echo "                                     'flat', 'heuristic'";
  echo "                                                        ";
  echo " Program options (mutation) ----------------------------";
  echo "                                                        ";
  echo "-hm|--heuristic-mutation.....Activate heuristic mutation";
  echo "                            for narrower range mutations";
  echo "-mr|-cmr|--command-mutation-rate....Define mutation rate";
  echo "                                            of a command";
  echo "-pmr|--parameter-mutation-rate......Define mutation rate";
  echo "                                          of a parameter";
  echo "                                                        ";
  echo " Program options (stop criteria) -----------------------";
  echo "                                                        ";
  echo "-sc|--stop-criteria.........Define stop criteria: '1' to";
  echo "             halt program when no offspring is produced,";
  echo "                  else (default) stop at last generation";
  echo "                                                        ";
}
#
function CHECK_DS_INPUT () {
    FILE1=$1
    FILE2=$2
    if [ ! -f "$FILE1" ] && [ ! -f "$FILE2" ]; then
        echo -e "\e[31mERROR: one of these files or both were not found: $FILE1 and $FILE2"
        echo -e "Run Setup.sh or GetDSinfo.sh to fix issue\e[0m";
        exit 1;
    fi
}
#
function FIX_SEQUENCE_NAME() {
    sequence="$1"
    sequence=$(echo $sequence | sed 's/.mfasta//g; s/.fasta//g; s/.mfa//g; s/.fa//g; s/.seq//g')
    #
    if [ "${sequence^^}" == "CY" ]; then 
        sequence="CY"
    elif [ "${sequence^^}" == "CASSAVA" ]; then 
        sequence="TME204.HiFi_HiC.haplotig1"
    elif [ "${sequence^^}" == "HUMAN" ]; then
        sequence="chm13v2.0"
    fi
}
#
function SAVE_SEED() {
    seedAndSiFile="$gaFolder/seed_and_si.txt"
    printf "$seed\t$si\n" > $seedAndSiFile
}
#
function GET_SEED() {
    seedAndSiFile="$gaFolder/seed_and_si.txt"
    if [ -f $seedAndSiFile ]; then
        [ -z "$seed" ] && seed=$(awk '{print $1}' $seedAndSiFile) && RANDOM=$seed
        [ -z "$si" ] && si=$(awk '{print $2}' $seedAndSiFile)
    else 
        [ -z "$seed" ] && seed=1 && RANDOM=$seed
        [ -z "$si" ] && si=10
        printf "$seed\t$si\n" > $seedAndSiFile
    fi
}
#
### DEFAULT VALUES ###############################################################################################
#
INIT_GEN=1;
FIRST_GEN=1;
LAST_GEN=100;
stopCriteria=0;
popSize=100;
#
ds_range="1:1";
#
ga="ga";
#
if [ $(w | wc -l) -gt 3 ]; then # if there is more than one user registered in the system
  nthreads=$(( $(nproc --all)/3 )); 
else
  nthreads=$(( $(nproc --all)-2 )); 
fi
#
# to choose version of the crossover and mutation algorithm
cmv=1
#
configJson="../config.json"
ds_sizesBase2="$(grep 'DS_sizesBase2' $configJson | awk -F':' '{print $2}' | tr -d '[:space:],"' )"
ds_sizesBase10="$(grep 'DS_sizesBase10' $configJson | awk -F':' '{print $2}' | tr -d '[:space:],"' )"
CHECK_DS_INPUT "$ds_sizesBase2" "$ds_sizesBase10"
#
logPath="../logs";
rm -fr $logPath;
mkdir -p $logPath;
#
### PARSING ###############################################################################################
#
allArgs="$@";
#
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -h|--help)
        SHOW_HELP;
        exit;
        ;;
    -v|--view-ds|--view-datasets)
        cat $ds_sizesBase2; echo; cat $ds_sizesBase10;
        exit;
        ;;
    -fg|--first-gen|--first-generation)
        FIRST_GEN="$2";
        shift 2;
        ;;
    -lg|--last-gen|--last-generation)
        LAST_GEN="$2";
        shift 2;
        ;;
    --genetic-algorithm|--algorithm|--ga|-ga|-a)
        ga="$2";
        flags+="-ga $ga ";
        shift 2; 
        ;;
    --sequence|--seq|-s)
        sequence="$2";
        FIX_SEQUENCE_NAME "$sequence";
        SEQUENCES+=( "$sequence" );
        shift 2;
        ;;
    --sequence-group|--sequence-grp|--seq-group|--seq-grp|-sg)
        size="$2";
        SEQUENCES+=( $(awk '/[[:space:]]'$size'/ { print $2 }' "$ds_sizesBase2") );
        shift 2; 
        ;;
    -ds|--dataset)
        ds="$2";
        SEQUENCES+=( "$(awk '/DS'$ds'[[:space:]]/{print $2}' "$ds_sizesBase2")" );
        shift 2;
        ;;
    -dr|--drange|--dsrange|--dataset-range)
        dsrange=( $(echo "$2" | sed 's/[:/]/ /g') );
        sorted_dsrange=( $(printf "%s\n" ${dsrange[@]} | sort -n ) );
        dsmin="${sorted_dsrange[0]}";
        dsmax="${sorted_dsrange[1]}";
        SEQUENCES+=( $(awk -v m=$dsmin -v M=$dsmax 'NR>=1+m && NR <=1+M {print $2}' "$ds_sizesBase2") );
        shift 2;
        ;;
    --population-size|--population|--psize|-ps)
        popSize="$2";
        initFlags+="-ps $popSize ";
        evalFlags+="-ps $popSize ";
        shift 2;
        ;;
    -sd|--seed)
        seed="$2";
        RANDOM=$seed;
        shift 2;
        ;;
    --seed-increment|-si)
        si="$2";
        shift 2;
        ;;
    #
    # INIT
    #
    --heuristic-initialization|-hei)
      initFlags+="-hei ";
      shift
      ;;
    --hybrid-initialization|-hyi)
      initFlags+="-hyi ";
      shift
      ;;
    --hybrid-heuristic-percentage|-hhp)
      hyiPercHeuCmds="$2"
      initFlags+="-hhp $hyiPercHeuCmds ";
      shift 2
      ;;
    --hybrid-heuristic-number|-hhn)
      hyiNumHeuCmds="$2"
      initFlags+="-hhn $hyiNumHeuCmds ";
      shift 2
      ;;
    --min-cm|--m-cm|-mCM)
      min_cms="$2";
      initFlags+="-mCM $min_cms ";
      shift 2;
      ;;
    --max-cm|--M-cm|-MCM)
      max_cms="$2";
      initFlags+="-MCM $max_cms ";
      shift 2;
      ;;
    --min-rm|--m-rm|-mRM)
      min_rms="$2";
      initFlags+="-mRM $min_rms ";
      shift 2;
      ;;
    --max-rm|--M-rm|-MRM)
      max_rms="$2";
      initFlags+="-MRM $max_rms ";
      shift 2; 
      ;;
    --learning-rate|-lr) 
      # 0 value turns the NN off
      lr="$2";
      initFlags+="-lr $lr ";
      shift 2;
      ;; 
    --hidden-size|-hs) 
      # hidden size of the NN
      hs="$2";
      initFlags+="-hs $hs ";
      shift 2;
      ;; 
    -sing|--seeding)
      initFlags+="-sing ";
      shift
      ;;
    #
    # RUN
    #
    -t|--nthreads)
        nthreads="$2";
        runFlags+="-t $nthreads ";
        shift 2;
        ;;
    #
    # EVALUATION
    #
    --moga-weightned-metric|--moga-wm|--moga)
        evalFlags+="--moga ";
        shift;
        ;;
    --moga-weightned-sum|--moga-ws)
        evalFlags+="--moga-ws ";
        shift;
        ;;
    --p-expoent|--p-exp|--pexp|-pe)
        pExp="$2";
        evalFlags+="--p-exp $pExp ";
        shift 2;
        ;;
    --weight-bps|--w-bps|-wBPS|-w1)
        w_bPS="$2";
        evalFlags+="-w1 $w_bPS ";
        shift 2;
        ;;
    --weight-ctime|--w-ctime|-wCTIME|-w2)
        w_CTIME="$2";
        evalFlags+="-w2 $w_CTIME ";
        shift 2;
        ;;
    #
    # SELECTION
    #
    --selection|--sel|-sl)
        # elitist, roulette
        SELECTION_OP="$2";
        selFlags+="-sl $SELECTION_OP ";
        shift 2;
        ;;
    --num-sel-cmds|-ns)
        ns="$2";
        selFlags+="-ns $ns ";
        shift 2;
        ;;
    --selection-rate|-sr)
        sr="$2";
        selFlags+="-sr $sr ";
        shift 2;
        ;;
    #
    # CROSSOVER
    #
    -cr|-ccr|--cmd-crossover-rate|--command-crossover-rate|--individual-crossover-rate|--genome-crossover-rate)
        CROSSOVER_RATE=$(echo "scale=3; $2" | bc);
        scmFlags+="-cr $CROSSOVER_RATE ";
        shift 2;
        ;;
    -mcr|--model-crossover-rate|--chromossome-crossover-rate)
        modelCR=$(echo "scale=3; $2" | bc);
        scmFlags+="-mcr $modelCR ";
        shift 2;
        ;;
    -cc|--command-crossover)
        cmdCrossoverOp="$2";
        scmFlags+="-cc $cmdCrossoverOp ";
        shift 2;
        ;;
    --crossover|--xover|--cover|-x|-c)
        # xpoint, uniform
        CROSSOVER_OP="$2";
        scmFlags+="-c $CROSSOVER_OP ";
        shift 2;
        ;;
    #
    # MUTATION
    #
    --heuristic-mutation|-hm)
        scmFlags+="-hm "
        shift
        ;;
    -mr|-cmr|--cmd-mut-rate|--cmd-mutation-rate|--command-mutation-rate|--individual-mutation-rate|--genome-mutation-rate)
        MUTATION_RATE=$(echo "scale=3; $2" | bc);
        scmFlags+="-mr $MUTATION_RATE ";
        shift 2;
        ;;
    -pmr|--param-mut-rate|--param-mutation-rate|--parameter-mutation-rate)
        paramMR=$(echo "scale=3; $2" | bc);
        scmFlags+="-pmr $paramMR ";
        shift 2;
        ;;
    #
    # STOP CRITERIA
    #
    -sc|--stop-criteria)
        stopCriteria="$2"
        shift 2
        ;;
    *) 
        echo "Invalid option: $1"
        exit 1;
    ;;
    esac
done
#
if [ ${#SEQUENCES[@]} -ne 0 ]; then 
    echo "Sequences to run: "
    printf "%s \n" "${SEQUENCES[@]}"
else 
    echo -e "\e[31mERROR: The program does not know which sequences to run"
    echo -e "run ./Setup.sh if required, then rerun this script with -v to view all datasets, or -h for help \e[0m";
    exit 1;
fi
#
### GA ########################################################################################################
#
for sequence in ${SEQUENCES[@]}; do
    #
    dsx=$(awk '/'$sequence'[[:space:]]/ { print $1 }' "$ds_sizesBase2");
    dsFolder="../$dsx";
    mkdir -p $dsFolder;
    #
    gaFolder="$dsFolder/$ga"
    if [ $FIRST_GEN -eq $INIT_GEN ] && (( ! $(ls "$gaFolder/g$INIT_GEN.sh" | wc -l) )); then
        cp -r "$gaFolder" "${gaFolder}_bkp"
        rm -fr $gaFolder
    fi
    mkdir -p $gaFolder
    GET_SEED
    #
    logFolder="$gaFolder/logs";
    mkdir -p $logFolder;
    #
    logFile="$logFolder/${dsx}_$ga.log"
    errFile="$logFolder/${dsx}_$ga.err"
    echo "log file: $logFile"
    echo "error file: $errFile"
    #
    initLogFolder="$logFolder/init"
    runLogFolder="$logFolder/run"
    evalLogFolder="$logFolder/eval"
    selLogFolder="$logFolder/sel"
    scmLogFolder="$logFolder/scm"
    mkdir -p $initLogFolder $runLogFolder $evalLogFolder $selLogFolder $scmLogFolder
    #
    gaCmds="$gaFolder/GAcmds.txt"
    echo "./GA.sh $allArgs" >> "$gaCmds"
    #
    startTime=$(date +%s%N)
    # 
    ( if [ $FIRST_GEN -eq $INIT_GEN ] && (( ! $(ls "$gaFolder/generations/g$INIT_GEN.sh" | wc -l) )); then 
        initLog="$initLogFolder/init.log"
        initErr="$initLogFolder/init.err"
        echo "1. INITIALIZATION - log file: $initLog ; err file: $initErr";
        echo "./Initialization.sh -s $sequence $flags $initFlags -sd $seed -si $si" >> "$gaCmds"
        bash -x ./Initialization.sh -s $sequence $flags $initFlags -sd $seed -si $si 1> $initLog 2> $initErr;
    fi
    #
    for gen in $(seq $FIRST_GEN $LAST_GEN); do
        echo "=== GENERATION $gen ===";
        #
        # === RUN ==========================================================================
        runLog="$runLogFolder/run$gen.log"
        runErr="$runLogFolder/run$gen.err"
        echo "2. RUN - log file: $runLog ; err file: $runErr";
        echo "./Run.sh -s $sequence -g $gen $flags $runFlags" >> "$gaCmds"
        bash -x ./Run.sh -s $sequence -g $gen $flags $runFlags 1> $runLog 2> $runErr;
        #
        # === EVALUATION ===================================================================
        evalLog="$evalLogFolder/eval$gen.log"
        evalErr="$evalLogFolder/eval$gen.err"
        echo "3. EVALUATION - log file: $evalLog ; err file: $evalErr";
        echo "./Evaluation.sh -s $sequence -g $gen $flags $evalFlags" >> "$gaCmds"
        bash -x ./Evaluation.sh -s $sequence -g $gen $flags $evalFlags 1> $evalLog 2> $evalErr;
        #
        # === SELECTION =====================================================================
        selLog="$selLogFolder/sel$gen.log"
        selErr="$selLogFolder/sel$gen.err"
        echo "4. SELECTION - log file: $selLog ; err file: $selErr";
        echo "./Selection.sh -s $sequence -g $gen $flags $selFlags" >> "$gaCmds"
        bash -x ./Selection.sh -s $sequence -g $gen $flags $selFlags 1> $selLog 2> $selErr;
        #
        # === CROSSOVER and MUTATION ========================================================
        scmLog="$scmLogFolder/scm$gen.log"
        scmErr="$scmLogFolder/scm$gen.err"
        echo "5. CROSSOVER, 6. MUTATION - log file: $scmLog ; err file: $scmErr";
        #
        # handles command crossover and mutation rate features 
        echo "./CrossMut.sh -s $sequence -g $gen $flags $scmFlags" >> "$gaCmds"
        bash -x ./CrossMut.sh -s $sequence -g $gen $flags $scmFlags 1> $scmLog 2> $scmErr;
        #
        # === STOP CRITERIA ========================================================
        #
        # this stop criteria option stops GA if generation has not produced offspring
        # before reaching last generation
        if [ $stopCriteria -eq 1 ]; then
            genScript="$gaFolder/g$gen.sh"
            numOffspring=$(cat $genScript|wc -l)
            [ $numOffspring -eq 0 ] && break
        fi
    done ) 1>> $logFile 2>> $errFile
    #
    endTime=$(date +%s%N)
    time_ns=$(($endTime-$startTime))
    time_ms=$(echo "scale=3; $time_ns/10^6" | bc)
    time_s=$(echo "scale=3; $time_ns/10^9" | bc)
    time_m=$(echo "scale=3; $time_s/60" | bc)
    time_h=$(echo "scale=3; $time_s/3600" | bc)
    times=( "$time_s s" "$time_m m"  "$time_h h" ) 
    printf "%s \n" "${times[@]}" >> $logFolder/time.txt
    #
    echo "$ga program ($dsx) is complete"
    echo "data saved in: ${gaFolder}"
done
